#!/usr/bin/env bash

function flatten {
    jq '
        def kv (k):
          if type == "array" then
            . as $in | keys[] | 
            if . == 0 then
              $in[.] | kv(k)
            else
              "\(k)_\(.)" as $kk | $in[.] | kv($kk)
            end
          elif type == "object" then
            to_entries | map(["\(k)_\(.key)", .value]) | .[]
          else
            [ k, . ]
          end;

        def flat:
          to_entries | 
          map("\(.key)" as $k | .value | kv($k)) |
          map(select(length > 0)) |
          map({key: .[0], value: .[1]}) |
          from_entries;

          map(.Tag = reduce .Tags[] as $t ({}; .[$t.Key | gsub("[^\\w]"; "_")] = $t.Value) | del(.Tags)) |

        map({ key: .PrivateIpAddress, value: flat }) | from_entries'
}

function flatten_again {
    jq '
        def kv (k):
          if type == "array" then
            . as $in | keys[] | "\(k)_\(.)" as $kk | $in[.] | kv($kk)
          elif type == "object" then
            to_entries | map(["\(k)_\(.key)", .value]) | .[]
          else
            [ k, . ]
          end;

        def flat:
          to_entries | 
          map("\(.key)" as $k | .value | kv($k)) |
          map(select(length > 0)) |
          map({key: .[0], value: .[1]}) |
          from_entries;

          
        with_entries(.value |= flat)
          '
}
function main {
  local shome="$(cd -P -- "${BASH_SOURCE%/*}/.." && pwd -P)"
  source "$shome/script/profile"

  aws ec2 describe-instances | jq '.Reservations[].Instances' | flatten | flatten_again | flatten_again
}


source sub-chain "$BASH_SOURCE" "$@"
